//
//  This file has been generated by the Microsoft Codename "Dallas" CTP.
//
//////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Xml.Linq;

namespace Microsoft.Dallas.Services
{

    #region NewsCategoriesItem

    /// <summary>Represents one item returned by the NewsCategoriesService.</summary>
    public partial class NewsCategoriesItem
    {
        public System.String Id { get; set; }
        public System.String Title { get; set; }
        public System.DateTime Updated { get; set; }
        public System.String Content { get; set; }

    }

    #endregion

    #region NewsByCategoryItem

    /// <summary>Represents one item returned by the NewsByCategoryService.</summary>
    public partial class NewsByCategoryItem
    {
        public System.String Id { get; set; }
        public System.String Title { get; set; }
        public System.DateTime Updated { get; set; }
        public System.String Link { get; set; }
        public System.String Content { get; set; }
        public System.String Author { get; set; }
        public System.String CategoryTerm { get; set; }
        public System.String CategoryLabel { get; set; }
        public System.String CategoryScheme { get; set; }

    }

    #endregion

    #region SearchNewsItem

    /// <summary>Represents one item returned by the SearchNewsService.</summary>
    public partial class SearchNewsItem
    {
        public System.String Id { get; set; }
        public System.String Title { get; set; }
        public System.DateTime Updated { get; set; }
        public System.String Link { get; set; }
        public System.String Content { get; set; }

    }

    #endregion

    #region SimilarArticlesItem

    /// <summary>Represents one item returned by the SimilarArticlesService.</summary>
    public partial class SimilarArticlesItem
    {
        public System.String Id { get; set; }
        public System.String Title { get; set; }
        public System.DateTime Updated { get; set; }
        public System.String Link { get; set; }
        public System.String Content { get; set; }

    }

    #endregion


    #region NewsCategoriesService

    /// <summary>Represents the proxy class for the NewsCategoriesService.</summary>
    public partial class NewsCategoriesService
    {
        #region Base service proxy functionality

        private int _currentPage;
        private int _itemsPerPage;

        /// <summary>
        /// Gets the account key used to access the service.
        /// </summary>
        public string AccountKey { get; private set; }

        /// <summary>
        /// Gets the unique user ID uses to access the service.
        /// </summary>
        public Guid UniqueUserID { get; private set; }

        /// <summary>
        /// Gets the service's URI.
        /// </summary>
        public string Uri { get; private set; }

        /// <summary>
        /// Gets whether the service supports paging.
        /// </summary>
        public bool SupportsPaging { get; private set; }

        /// <summary>
        /// Gets and sets the current page.
        /// </summary>
        public int CurrentPage
        {
            get
            {
                return _currentPage;
            }
            set
            {
                if (!this.SupportsPaging)
                    throw new InvalidOperationException("Paging is not supported by the service.");
                _currentPage = value;
            }
        }

        /// <summary>
        /// Gets and sets the items that are shown per page.
        /// </summary>
        public int ItemsPerPage
        {
            get
            {
                return _itemsPerPage;
            }
            set
            {
                if (!this.SupportsPaging)
                    throw new InvalidOperationException("Paging is not supported by the service.");
                _itemsPerPage = value;
            }
        }

        #endregion

        /// <summary>
        /// Creates a new instance of the NewsCategoriesService Class.
        /// </summary>
        /// <param name="accountKey">The account key used to access the service.</param>
        /// <param name="uniqueUserID">The unique user ID used to access the service.</param>
        public NewsCategoriesService(string accountKey, Guid uniqueUserID)
        {
            if (accountKey == null)
                throw new ArgumentNullException("accountKey");
            if (uniqueUserID == Guid.Empty)
                throw new ArgumentNullException("uniqueUserID");
                
            this.SupportsPaging = false;

            if (this.SupportsPaging)
            {
                this.CurrentPage = 1;
                this.ItemsPerPage = 100;
            }
            this.AccountKey = accountKey;
            this.UniqueUserID = uniqueUserID;
            this.Uri = "https://api.sqlazureservices.com/APService.svc/Categories";
        }

        private IEnumerable<XElement> InvokeWebService(string url)
        {
            if (url == null)
                throw new ArgumentNullException("url");

            HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(url);
            request.Headers.Add("$accountKey", this.AccountKey);
            request.Headers.Add("$uniqueUserID", this.UniqueUserID.ToString());

            XDocument xml = null;
            using(HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {
                using(StreamReader reader = new StreamReader(response.GetResponseStream()))
                {
                    xml = XDocument.Parse(reader.ReadToEnd());
                }
            }
            
            return xml.Root.Elements(XName.Get("entry", "http://www.w3.org/2005/Atom"));
        }

        /// <summary>
        /// Queries the service for NewsCategories items.
        /// </summary>
        public List<NewsCategoriesItem> Invoke()
        {


            StringBuilder builder = new StringBuilder();
            builder.Append(this.Uri);


            builder.Append("?$format=atom10");
            
            if (this.SupportsPaging)
            {
                builder.Append("&$page=" + this.CurrentPage);
                builder.Append("&$itemsPerPage=" + this.ItemsPerPage);
            }
            


            List<NewsCategoriesItem> result = new List<NewsCategoriesItem>();

            foreach (XElement element in this.InvokeWebService(builder.ToString()))
            {
                XElement properties = element.Element(XName.Get("content", "http://www.w3.org/2005/Atom"))
                    .Element(XName.Get("properties", "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"));

                NewsCategoriesItem item = new NewsCategoriesItem();

                XElement __temp_Id = properties.Element(XName.Get("Id", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Id != null && !string.IsNullOrEmpty(__temp_Id.Value))
                        item.Id = (System.String)Convert.ChangeType(__temp_Id.Value, typeof(System.String));
                XElement __temp_Title = properties.Element(XName.Get("Title", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Title != null && !string.IsNullOrEmpty(__temp_Title.Value))
                        item.Title = (System.String)Convert.ChangeType(__temp_Title.Value, typeof(System.String));
                XElement __temp_Updated = properties.Element(XName.Get("Updated", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Updated != null && !string.IsNullOrEmpty(__temp_Updated.Value))
                        item.Updated = (System.DateTime)Convert.ChangeType(__temp_Updated.Value, typeof(System.DateTime));
                XElement __temp_Content = properties.Element(XName.Get("Content", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Content != null && !string.IsNullOrEmpty(__temp_Content.Value))
                        item.Content = (System.String)Convert.ChangeType(__temp_Content.Value, typeof(System.String));


                result.Add(item);
            }
            
            return result;
        }

    }
    
    #endregion

    #region NewsByCategoryService

    /// <summary>Represents the proxy class for the NewsByCategoryService.</summary>
    public partial class NewsByCategoryService
    {
        #region Base service proxy functionality

        private int _currentPage;
        private int _itemsPerPage;

        /// <summary>
        /// Gets the account key used to access the service.
        /// </summary>
        public string AccountKey { get; private set; }

        /// <summary>
        /// Gets the unique user ID uses to access the service.
        /// </summary>
        public Guid UniqueUserID { get; private set; }

        /// <summary>
        /// Gets the service's URI.
        /// </summary>
        public string Uri { get; private set; }

        /// <summary>
        /// Gets whether the service supports paging.
        /// </summary>
        public bool SupportsPaging { get; private set; }

        /// <summary>
        /// Gets and sets the current page.
        /// </summary>
        public int CurrentPage
        {
            get
            {
                return _currentPage;
            }
            set
            {
                if (!this.SupportsPaging)
                    throw new InvalidOperationException("Paging is not supported by the service.");
                _currentPage = value;
            }
        }

        /// <summary>
        /// Gets and sets the items that are shown per page.
        /// </summary>
        public int ItemsPerPage
        {
            get
            {
                return _itemsPerPage;
            }
            set
            {
                if (!this.SupportsPaging)
                    throw new InvalidOperationException("Paging is not supported by the service.");
                _itemsPerPage = value;
            }
        }

        #endregion

        /// <summary>
        /// Creates a new instance of the NewsByCategoryService Class.
        /// </summary>
        /// <param name="accountKey">The account key used to access the service.</param>
        /// <param name="uniqueUserID">The unique user ID used to access the service.</param>
        public NewsByCategoryService(string accountKey, Guid uniqueUserID)
        {
            if (accountKey == null)
                throw new ArgumentNullException("accountKey");
            if (uniqueUserID == Guid.Empty)
                throw new ArgumentNullException("uniqueUserID");
                
            this.SupportsPaging = false;

            if (this.SupportsPaging)
            {
                this.CurrentPage = 1;
                this.ItemsPerPage = 100;
            }
            this.AccountKey = accountKey;
            this.UniqueUserID = uniqueUserID;
            this.Uri = "https://api.sqlazureservices.com/APService.svc/Categories/{categoryId}";
        }

        private IEnumerable<XElement> InvokeWebService(string url)
        {
            if (url == null)
                throw new ArgumentNullException("url");

            HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(url);
            request.Headers.Add("$accountKey", this.AccountKey);
            request.Headers.Add("$uniqueUserID", this.UniqueUserID.ToString());

            XDocument xml = null;
            using(HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {
                using(StreamReader reader = new StreamReader(response.GetResponseStream()))
                {
                    xml = XDocument.Parse(reader.ReadToEnd());
                }
            }
            
            return xml.Root.Elements(XName.Get("entry", "http://www.w3.org/2005/Atom"));
        }

        /// <summary>
        /// Queries the service for NewsByCategory items.
        /// </summary>
        /// <param name="categoryId">The ID of the news category (Example values: 31995)</param>
        /// <param name="ContentOption">Format of the news entries (Example values: 0, 2)</param>
        /// <param name="NumItems">The number of news entries to return (Example values: 5, 10, 20)</param>
        public List<NewsByCategoryItem> Invoke(System.String categoryId, System.String ContentOption, System.Int32? NumItems)
        {
            if(categoryId == null)
                throw new ArgumentNullException("categoryId");


            StringBuilder builder = new StringBuilder();
            builder.Append(this.Uri);

            builder = builder.Replace("{categoryId}", categoryId);

            builder.Append("?$format=atom10");
            
            if (this.SupportsPaging)
            {
                builder.Append("&$page=" + this.CurrentPage);
                builder.Append("&$itemsPerPage=" + this.ItemsPerPage);
            }
            
            if (ContentOption != null)
                builder.Append("&ContentOption=" + ContentOption);
            if (NumItems != null)
                builder.Append("&NumItems=" + NumItems);


            List<NewsByCategoryItem> result = new List<NewsByCategoryItem>();

            foreach (XElement element in this.InvokeWebService(builder.ToString()))
            {
                XElement properties = element.Element(XName.Get("content", "http://www.w3.org/2005/Atom"))
                    .Element(XName.Get("properties", "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"));

                NewsByCategoryItem item = new NewsByCategoryItem();

                XElement __temp_Id = properties.Element(XName.Get("Id", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Id != null && !string.IsNullOrEmpty(__temp_Id.Value))
                        item.Id = (System.String)Convert.ChangeType(__temp_Id.Value, typeof(System.String));
                XElement __temp_Title = properties.Element(XName.Get("Title", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Title != null && !string.IsNullOrEmpty(__temp_Title.Value))
                        item.Title = (System.String)Convert.ChangeType(__temp_Title.Value, typeof(System.String));
                XElement __temp_Updated = properties.Element(XName.Get("Updated", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Updated != null && !string.IsNullOrEmpty(__temp_Updated.Value))
                        item.Updated = (System.DateTime)Convert.ChangeType(__temp_Updated.Value, typeof(System.DateTime));
                XElement __temp_Link = properties.Element(XName.Get("Link", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Link != null && !string.IsNullOrEmpty(__temp_Link.Value))
                        item.Link = (System.String)Convert.ChangeType(__temp_Link.Value, typeof(System.String));
                XElement __temp_Content = properties.Element(XName.Get("Content", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Content != null && !string.IsNullOrEmpty(__temp_Content.Value))
                        item.Content = (System.String)Convert.ChangeType(__temp_Content.Value, typeof(System.String));
                XElement __temp_Author = properties.Element(XName.Get("Author", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Author != null && !string.IsNullOrEmpty(__temp_Author.Value))
                        item.Author = (System.String)Convert.ChangeType(__temp_Author.Value, typeof(System.String));
                XElement __temp_CategoryTerm = properties.Element(XName.Get("CategoryTerm", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_CategoryTerm != null && !string.IsNullOrEmpty(__temp_CategoryTerm.Value))
                        item.CategoryTerm = (System.String)Convert.ChangeType(__temp_CategoryTerm.Value, typeof(System.String));
                XElement __temp_CategoryLabel = properties.Element(XName.Get("CategoryLabel", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_CategoryLabel != null && !string.IsNullOrEmpty(__temp_CategoryLabel.Value))
                        item.CategoryLabel = (System.String)Convert.ChangeType(__temp_CategoryLabel.Value, typeof(System.String));
                XElement __temp_CategoryScheme = properties.Element(XName.Get("CategoryScheme", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_CategoryScheme != null && !string.IsNullOrEmpty(__temp_CategoryScheme.Value))
                        item.CategoryScheme = (System.String)Convert.ChangeType(__temp_CategoryScheme.Value, typeof(System.String));


                result.Add(item);
            }
            
            return result;
        }

    }
    
    #endregion

    #region SearchNewsService

    /// <summary>Represents the proxy class for the SearchNewsService.</summary>
    public partial class SearchNewsService
    {
        #region Base service proxy functionality

        private int _currentPage;
        private int _itemsPerPage;

        /// <summary>
        /// Gets the account key used to access the service.
        /// </summary>
        public string AccountKey { get; private set; }

        /// <summary>
        /// Gets the unique user ID uses to access the service.
        /// </summary>
        public Guid UniqueUserID { get; private set; }

        /// <summary>
        /// Gets the service's URI.
        /// </summary>
        public string Uri { get; private set; }

        /// <summary>
        /// Gets whether the service supports paging.
        /// </summary>
        public bool SupportsPaging { get; private set; }

        /// <summary>
        /// Gets and sets the current page.
        /// </summary>
        public int CurrentPage
        {
            get
            {
                return _currentPage;
            }
            set
            {
                if (!this.SupportsPaging)
                    throw new InvalidOperationException("Paging is not supported by the service.");
                _currentPage = value;
            }
        }

        /// <summary>
        /// Gets and sets the items that are shown per page.
        /// </summary>
        public int ItemsPerPage
        {
            get
            {
                return _itemsPerPage;
            }
            set
            {
                if (!this.SupportsPaging)
                    throw new InvalidOperationException("Paging is not supported by the service.");
                _itemsPerPage = value;
            }
        }

        #endregion

        /// <summary>
        /// Creates a new instance of the SearchNewsService Class.
        /// </summary>
        /// <param name="accountKey">The account key used to access the service.</param>
        /// <param name="uniqueUserID">The unique user ID used to access the service.</param>
        public SearchNewsService(string accountKey, Guid uniqueUserID)
        {
            if (accountKey == null)
                throw new ArgumentNullException("accountKey");
            if (uniqueUserID == Guid.Empty)
                throw new ArgumentNullException("uniqueUserID");
                
            this.SupportsPaging = true;

            if (this.SupportsPaging)
            {
                this.CurrentPage = 1;
                this.ItemsPerPage = 100;
            }
            this.AccountKey = accountKey;
            this.UniqueUserID = uniqueUserID;
            this.Uri = "https://api.sqlazureservices.com/APService.svc/Search";
        }

        private IEnumerable<XElement> InvokeWebService(string url)
        {
            if (url == null)
                throw new ArgumentNullException("url");

            HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(url);
            request.Headers.Add("$accountKey", this.AccountKey);
            request.Headers.Add("$uniqueUserID", this.UniqueUserID.ToString());

            XDocument xml = null;
            using(HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {
                using(StreamReader reader = new StreamReader(response.GetResponseStream()))
                {
                    xml = XDocument.Parse(reader.ReadToEnd());
                }
            }
            
            return xml.Root.Elements(XName.Get("entry", "http://www.w3.org/2005/Atom"));
        }

        /// <summary>
        /// Queries the service for SearchNews items.
        /// </summary>
        /// <param name="SearchTerms">The search keyword (Example values: Obama)</param>
        /// <param name="MediaSize">Size of the related media to be included in the results (Example values: thumbnail, preview)</param>
        public List<SearchNewsItem> Invoke(System.String SearchTerms, System.String MediaSize)
        {
            if(SearchTerms == null)
                throw new ArgumentNullException("SearchTerms");


            StringBuilder builder = new StringBuilder();
            builder.Append(this.Uri);


            builder.Append("?$format=atom10");
            
            if (this.SupportsPaging)
            {
                builder.Append("&$page=" + this.CurrentPage);
                builder.Append("&$itemsPerPage=" + this.ItemsPerPage);
            }
            
            if (SearchTerms != null)
                builder.Append("&SearchTerms=" + SearchTerms);
            if (MediaSize != null)
                builder.Append("&MediaSize=" + MediaSize);


            List<SearchNewsItem> result = new List<SearchNewsItem>();

            foreach (XElement element in this.InvokeWebService(builder.ToString()))
            {
                XElement properties = element.Element(XName.Get("content", "http://www.w3.org/2005/Atom"))
                    .Element(XName.Get("properties", "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"));

                SearchNewsItem item = new SearchNewsItem();

                XElement __temp_Id = properties.Element(XName.Get("Id", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Id != null && !string.IsNullOrEmpty(__temp_Id.Value))
                        item.Id = (System.String)Convert.ChangeType(__temp_Id.Value, typeof(System.String));
                XElement __temp_Title = properties.Element(XName.Get("Title", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Title != null && !string.IsNullOrEmpty(__temp_Title.Value))
                        item.Title = (System.String)Convert.ChangeType(__temp_Title.Value, typeof(System.String));
                XElement __temp_Updated = properties.Element(XName.Get("Updated", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Updated != null && !string.IsNullOrEmpty(__temp_Updated.Value))
                        item.Updated = (System.DateTime)Convert.ChangeType(__temp_Updated.Value, typeof(System.DateTime));
                XElement __temp_Link = properties.Element(XName.Get("Link", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Link != null && !string.IsNullOrEmpty(__temp_Link.Value))
                        item.Link = (System.String)Convert.ChangeType(__temp_Link.Value, typeof(System.String));
                XElement __temp_Content = properties.Element(XName.Get("Content", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Content != null && !string.IsNullOrEmpty(__temp_Content.Value))
                        item.Content = (System.String)Convert.ChangeType(__temp_Content.Value, typeof(System.String));


                result.Add(item);
            }
            
            return result;
        }

    }
    
    #endregion

    #region SimilarArticlesService

    /// <summary>Represents the proxy class for the SimilarArticlesService.</summary>
    public partial class SimilarArticlesService
    {
        #region Base service proxy functionality

        private int _currentPage;
        private int _itemsPerPage;

        /// <summary>
        /// Gets the account key used to access the service.
        /// </summary>
        public string AccountKey { get; private set; }

        /// <summary>
        /// Gets the unique user ID uses to access the service.
        /// </summary>
        public Guid UniqueUserID { get; private set; }

        /// <summary>
        /// Gets the service's URI.
        /// </summary>
        public string Uri { get; private set; }

        /// <summary>
        /// Gets whether the service supports paging.
        /// </summary>
        public bool SupportsPaging { get; private set; }

        /// <summary>
        /// Gets and sets the current page.
        /// </summary>
        public int CurrentPage
        {
            get
            {
                return _currentPage;
            }
            set
            {
                if (!this.SupportsPaging)
                    throw new InvalidOperationException("Paging is not supported by the service.");
                _currentPage = value;
            }
        }

        /// <summary>
        /// Gets and sets the items that are shown per page.
        /// </summary>
        public int ItemsPerPage
        {
            get
            {
                return _itemsPerPage;
            }
            set
            {
                if (!this.SupportsPaging)
                    throw new InvalidOperationException("Paging is not supported by the service.");
                _itemsPerPage = value;
            }
        }

        #endregion

        /// <summary>
        /// Creates a new instance of the SimilarArticlesService Class.
        /// </summary>
        /// <param name="accountKey">The account key used to access the service.</param>
        /// <param name="uniqueUserID">The unique user ID used to access the service.</param>
        public SimilarArticlesService(string accountKey, Guid uniqueUserID)
        {
            if (accountKey == null)
                throw new ArgumentNullException("accountKey");
            if (uniqueUserID == Guid.Empty)
                throw new ArgumentNullException("uniqueUserID");
                
            this.SupportsPaging = true;

            if (this.SupportsPaging)
            {
                this.CurrentPage = 1;
                this.ItemsPerPage = 100;
            }
            this.AccountKey = accountKey;
            this.UniqueUserID = uniqueUserID;
            this.Uri = "https://api.sqlazureservices.com/APService.svc/Similar";
        }

        private IEnumerable<XElement> InvokeWebService(string url)
        {
            if (url == null)
                throw new ArgumentNullException("url");

            HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(url);
            request.Headers.Add("$accountKey", this.AccountKey);
            request.Headers.Add("$uniqueUserID", this.UniqueUserID.ToString());

            XDocument xml = null;
            using(HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {
                using(StreamReader reader = new StreamReader(response.GetResponseStream()))
                {
                    xml = XDocument.Parse(reader.ReadToEnd());
                }
            }
            
            return xml.Root.Elements(XName.Get("entry", "http://www.w3.org/2005/Atom"));
        }

        /// <summary>
        /// Queries the service for SimilarArticles items.
        /// </summary>
        /// <param name="ArticleId">The ID of the article (Example values: c7d7be5142734521a649fd101a03b732)</param>
        /// <param name="MediaSize">Size of the related media to be included in the results (Example values: thumbnail, preview)</param>
        public List<SimilarArticlesItem> Invoke(System.String ArticleId, System.String MediaSize)
        {
            if(ArticleId == null)
                throw new ArgumentNullException("ArticleId");


            StringBuilder builder = new StringBuilder();
            builder.Append(this.Uri);


            builder.Append("?$format=atom10");
            
            if (this.SupportsPaging)
            {
                builder.Append("&$page=" + this.CurrentPage);
                builder.Append("&$itemsPerPage=" + this.ItemsPerPage);
            }
            
            if (ArticleId != null)
                builder.Append("&ArticleId=" + ArticleId);
            if (MediaSize != null)
                builder.Append("&MediaSize=" + MediaSize);


            List<SimilarArticlesItem> result = new List<SimilarArticlesItem>();

            foreach (XElement element in this.InvokeWebService(builder.ToString()))
            {
                XElement properties = element.Element(XName.Get("content", "http://www.w3.org/2005/Atom"))
                    .Element(XName.Get("properties", "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"));

                SimilarArticlesItem item = new SimilarArticlesItem();

                XElement __temp_Id = properties.Element(XName.Get("Id", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Id != null && !string.IsNullOrEmpty(__temp_Id.Value))
                        item.Id = (System.String)Convert.ChangeType(__temp_Id.Value, typeof(System.String));
                XElement __temp_Title = properties.Element(XName.Get("Title", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Title != null && !string.IsNullOrEmpty(__temp_Title.Value))
                        item.Title = (System.String)Convert.ChangeType(__temp_Title.Value, typeof(System.String));
                XElement __temp_Updated = properties.Element(XName.Get("Updated", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Updated != null && !string.IsNullOrEmpty(__temp_Updated.Value))
                        item.Updated = (System.DateTime)Convert.ChangeType(__temp_Updated.Value, typeof(System.DateTime));
                XElement __temp_Link = properties.Element(XName.Get("Link", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Link != null && !string.IsNullOrEmpty(__temp_Link.Value))
                        item.Link = (System.String)Convert.ChangeType(__temp_Link.Value, typeof(System.String));
                XElement __temp_Content = properties.Element(XName.Get("Content", "http://schemas.microsoft.com/ado/2007/08/dataservices"));
                if (__temp_Content != null && !string.IsNullOrEmpty(__temp_Content.Value))
                        item.Content = (System.String)Convert.ChangeType(__temp_Content.Value, typeof(System.String));


                result.Add(item);
            }
            
            return result;
        }

    }
    
    #endregion

}